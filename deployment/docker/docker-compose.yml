version: '3.8'

services:
  postgres:
    image: postgres:14
    container_name: backstage-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: backstage
      POSTGRES_PASSWORD: backstage
      POSTGRES_DB: backstage
    ports:
      - '5432:5432'
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U backstage']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backstage-network

  backstage:
    build:
      context: .
      dockerfile: Dockerfile
    image: backstage-gitops:latest
    container_name: backstage-app
    restart: unless-stopped
    ports:
      - '7007:7007'
    environment:
      # Backstage Configuration
      BACKSTAGE_BASE_URL: http://localhost:7007
      LOG_LEVEL: info

      # Database Configuration
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: backstage
      POSTGRES_PASSWORD: backstage
      POSTGRES_DB: backstage

      # GitHub Configuration (set these from .env or override here)
      GITHUB_TOKEN: ${GITHUB_TOKEN}
      GITHUB_ORG: ${GITHUB_ORG:-radiantlogic-saas}

      # ArgoCD Configuration (optional)
      ARGOCD_ENABLED: ${ARGOCD_ENABLED:-false}
      ARGOCD_URL: ${ARGOCD_URL:-}
      ARGOCD_TOKEN: ${ARGOCD_TOKEN:-}

      # Grafana Configuration (optional)
      GRAFANA_ENABLED: ${GRAFANA_ENABLED:-false}
      GRAFANA_URL: ${GRAFANA_URL:-}
      GRAFANA_API_KEY: ${GRAFANA_API_KEY:-}
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:7007/healthcheck']
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 40s
    networks:
      - backstage-network

networks:
  backstage-network:
    driver: bridge

volumes:
  postgres-data:
    driver: local
